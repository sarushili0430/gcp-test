"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The Cloudbuildv2 Connection resource
 *
 * ## Example Usage
 * ### Ghe
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as gcp from "@pulumi/gcp";
 *
 * const private_key_secret = new gcp.secretmanager.Secret("private-key-secret", {
 *     secretId: "ghe-pk-secret",
 *     replication: {
 *         auto: {},
 *     },
 * });
 * const private_key_secret_version = new gcp.secretmanager.SecretVersion("private-key-secret-version", {
 *     secret: private_key_secret.id,
 *     secretData: fs.readFileSync("private-key.pem", "utf8"),
 * });
 * const webhook_secret_secret = new gcp.secretmanager.Secret("webhook-secret-secret", {
 *     secretId: "github-token-secret",
 *     replication: {
 *         auto: {},
 *     },
 * });
 * const webhook_secret_secret_version = new gcp.secretmanager.SecretVersion("webhook-secret-secret-version", {
 *     secret: webhook_secret_secret.id,
 *     secretData: "<webhook-secret-data>",
 * });
 * const p4sa-secretAccessor = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/secretmanager.secretAccessor",
 *         members: ["serviceAccount:service-123456789@gcp-sa-cloudbuild.iam.gserviceaccount.com"],
 *     }],
 * });
 * const policy_pk = new gcp.secretmanager.SecretIamPolicy("policy-pk", {
 *     secretId: private_key_secret.secretId,
 *     policyData: p4sa_secretAccessor.then(p4sa_secretAccessor => p4sa_secretAccessor.policyData),
 * });
 * const policy_whs = new gcp.secretmanager.SecretIamPolicy("policy-whs", {
 *     secretId: webhook_secret_secret.secretId,
 *     policyData: p4sa_secretAccessor.then(p4sa_secretAccessor => p4sa_secretAccessor.policyData),
 * });
 * const my_connection = new gcp.cloudbuildv2.Connection("my-connection", {
 *     location: "us-central1",
 *     githubEnterpriseConfig: {
 *         hostUri: "https://ghe.com",
 *         privateKeySecretVersion: private_key_secret_version.id,
 *         webhookSecretSecretVersion: webhook_secret_secret_version.id,
 *         appId: 200,
 *         appSlug: "gcb-app",
 *         appInstallationId: 300,
 *     },
 * }, {
 *     dependsOn: [
 *         policy_pk,
 *         policy_whs,
 *     ],
 * });
 * ```
 * ### GitHub Connection
 * Creates a Connection to github.com
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as gcp from "@pulumi/gcp";
 *
 * const github_token_secret = new gcp.secretmanager.Secret("github-token-secret", {
 *     secretId: "github-token-secret",
 *     replication: {
 *         auto: {},
 *     },
 * });
 * const github_token_secret_version = new gcp.secretmanager.SecretVersion("github-token-secret-version", {
 *     secret: github_token_secret.id,
 *     secretData: fs.readFileSync("my-github-token.txt", "utf8"),
 * });
 * const p4sa-secretAccessor = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/secretmanager.secretAccessor",
 *         members: ["serviceAccount:service-123456789@gcp-sa-cloudbuild.iam.gserviceaccount.com"],
 *     }],
 * });
 * const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
 *     secretId: github_token_secret.secretId,
 *     policyData: p4sa_secretAccessor.then(p4sa_secretAccessor => p4sa_secretAccessor.policyData),
 * });
 * const my_connection = new gcp.cloudbuildv2.Connection("my-connection", {
 *     location: "us-west1",
 *     githubConfig: {
 *         appInstallationId: 123123,
 *         authorizerCredential: {
 *             oauthTokenSecretVersion: github_token_secret_version.id,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Connection can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/connections/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` When using the `pulumi import` command, Connection can be imported using one of the formats above. For example
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuildv2/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuildv2/connection:Connection default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuildv2/connection:Connection default {{location}}/{{name}}
 * ```
 */
class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Connection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["githubConfig"] = state ? state.githubConfig : undefined;
            resourceInputs["githubEnterpriseConfig"] = state ? state.githubEnterpriseConfig : undefined;
            resourceInputs["gitlabConfig"] = state ? state.gitlabConfig : undefined;
            resourceInputs["installationStates"] = state ? state.installationStates : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["githubConfig"] = args ? args.githubConfig : undefined;
            resourceInputs["githubEnterpriseConfig"] = args ? args.githubEnterpriseConfig : undefined;
            resourceInputs["gitlabConfig"] = args ? args.gitlabConfig : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["installationStates"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Connection = Connection;
/** @internal */
Connection.__pulumiType = 'gcp:cloudbuildv2/connection:Connection';
//# sourceMappingURL=connection.js.map