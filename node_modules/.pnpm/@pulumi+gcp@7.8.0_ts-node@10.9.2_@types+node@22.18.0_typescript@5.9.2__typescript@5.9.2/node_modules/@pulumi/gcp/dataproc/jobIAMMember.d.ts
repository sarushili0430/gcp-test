import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Three different resources help you manage IAM policies on dataproc jobs. Each of these resources serves a different use case:
 *
 * * `gcp.dataproc.JobIAMPolicy`: Authoritative. Sets the IAM policy for the job and replaces any existing policy already attached.
 * * `gcp.dataproc.JobIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the job are preserved.
 * * `gcp.dataproc.JobIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the job are preserved.
 *
 * > **Note:** `gcp.dataproc.JobIAMPolicy` **cannot** be used in conjunction with `gcp.dataproc.JobIAMBinding` and `gcp.dataproc.JobIAMMember` or they will fight over what your policy should be. In addition, be careful not to accidentally unset ownership of the job as `gcp.dataproc.JobIAMPolicy` replaces the entire policy.
 *
 * > **Note:** `gcp.dataproc.JobIAMBinding` resources **can be** used in conjunction with `gcp.dataproc.JobIAMMember` resources **only if** they do not grant privilege to the same role.
 *
 * ## google\_dataproc\_job\_iam\_policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/editor",
 *         members: ["user:jane@example.com"],
 *     }],
 * });
 * const editor = new gcp.dataproc.JobIAMPolicy("editor", {
 *     project: "your-project",
 *     region: "your-region",
 *     jobId: "your-dataproc-job",
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 *
 * ## google\_dataproc\_job\_iam\_binding
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const editor = new gcp.dataproc.JobIAMBinding("editor", {
 *     jobId: "your-dataproc-job",
 *     members: ["user:jane@example.com"],
 *     role: "roles/editor",
 * });
 * ```
 *
 * ## google\_dataproc\_job\_iam\_member
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const editor = new gcp.dataproc.JobIAMMember("editor", {
 *     jobId: "your-dataproc-job",
 *     member: "user:jane@example.com",
 *     role: "roles/editor",
 * });
 * ```
 *
 * ## Import
 *
 * ### Importing IAM policies IAM policy imports use the `job_id` identifier of the Dataproc Job resource only. For example* `projects/{project}/regions/{region}/jobs/{job_id}` An `import` block (Terraform v1.5.0 and later) can be used to import IAM policiestf import {
 *
 *  id = "projects/{project}/regions/{region}/jobs/{job_id}"
 *
 *  to = google_dataproc_job_iam_policy.default } The `pulumi import` command can also be used
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/jobIAMMember:JobIAMMember default "projects/{project}/regions/{region}/jobs/{job_id}"
 * ```
 */
export declare class JobIAMMember extends pulumi.CustomResource {
    /**
     * Get an existing JobIAMMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobIAMMemberState, opts?: pulumi.CustomResourceOptions): JobIAMMember;
    /**
     * Returns true if the given object is an instance of JobIAMMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is JobIAMMember;
    readonly condition: pulumi.Output<outputs.dataproc.JobIAMMemberCondition | undefined>;
    /**
     * (Computed) The etag of the jobs's IAM policy.
     */
    readonly etag: pulumi.Output<string>;
    readonly jobId: pulumi.Output<string>;
    readonly member: pulumi.Output<string>;
    /**
     * The project in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The region in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    readonly region: pulumi.Output<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.dataproc.JobIAMBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     *
     * `gcp.dataproc.JobIAMPolicy` only:
     */
    readonly role: pulumi.Output<string>;
    /**
     * Create a JobIAMMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobIAMMemberArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering JobIAMMember resources.
 */
export interface JobIAMMemberState {
    condition?: pulumi.Input<inputs.dataproc.JobIAMMemberCondition>;
    /**
     * (Computed) The etag of the jobs's IAM policy.
     */
    etag?: pulumi.Input<string>;
    jobId?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    /**
     * The project in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    project?: pulumi.Input<string>;
    /**
     * The region in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    region?: pulumi.Input<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.dataproc.JobIAMBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     *
     * `gcp.dataproc.JobIAMPolicy` only:
     */
    role?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a JobIAMMember resource.
 */
export interface JobIAMMemberArgs {
    condition?: pulumi.Input<inputs.dataproc.JobIAMMemberCondition>;
    jobId: pulumi.Input<string>;
    member: pulumi.Input<string>;
    /**
     * The project in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    project?: pulumi.Input<string>;
    /**
     * The region in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    region?: pulumi.Input<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.dataproc.JobIAMBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     *
     * `gcp.dataproc.JobIAMPolicy` only:
     */
    role: pulumi.Input<string>;
}
