"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentAiWarehouseDocumentSchema = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A document schema is used to define document structure.
 *
 * To get more information about DocumentSchema, see:
 *
 * * [API documentation](https://cloud.google.com/document-warehouse/docs/reference/rest/v1/projects.locations.documentSchemas)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/document-warehouse/docs/manage-document-schemas)
 *
 * ## Example Usage
 * ### Document Ai Warehouse Document Schema Text
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const exampleText = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("exampleText", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-text",
 *     location: "us",
 *     documentIsFolder: false,
 *     propertyDefinitions: [{
 *         name: "prop3",
 *         displayName: "propdisp3",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         textTypeOptions: {},
 *     }],
 * });
 * ```
 * ### Document Ai Warehouse Document Schema Integer
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const exampleInteger = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("exampleInteger", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-integer",
 *     location: "us",
 *     propertyDefinitions: [{
 *         name: "prop1",
 *         displayName: "propdisp1",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         integerTypeOptions: {},
 *     }],
 * });
 * ```
 * ### Document Ai Warehouse Document Schema Float
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const exampleFloat = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("exampleFloat", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-float",
 *     location: "us",
 *     propertyDefinitions: [{
 *         name: "prop2",
 *         displayName: "propdisp2",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         floatTypeOptions: {},
 *     }],
 * });
 * ```
 * ### Document Ai Warehouse Document Schema Property
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const exampleProperty = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("exampleProperty", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-property",
 *     location: "us",
 *     documentIsFolder: false,
 *     propertyDefinitions: [{
 *         name: "prop8",
 *         displayName: "propdisp8",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         propertyTypeOptions: {
 *             propertyDefinitions: [{
 *                 name: "prop8_nested",
 *                 displayName: "propdisp8_nested",
 *                 isRepeatable: false,
 *                 isFilterable: true,
 *                 isSearchable: true,
 *                 isMetadata: false,
 *                 isRequired: false,
 *                 retrievalImportance: "HIGHEST",
 *                 schemaSources: [{
 *                     name: "dummy_source_nested",
 *                     processorType: "dummy_processor_nested",
 *                 }],
 *                 textTypeOptions: {},
 *             }],
 *         },
 *     }],
 * });
 * ```
 * ### Document Ai Warehouse Document Schema Property Enum
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const examplePropertyEnum = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("examplePropertyEnum", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-property",
 *     location: "us",
 *     documentIsFolder: false,
 *     propertyDefinitions: [{
 *         name: "prop8",
 *         displayName: "propdisp8",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         propertyTypeOptions: {
 *             propertyDefinitions: [{
 *                 name: "prop8_nested",
 *                 displayName: "propdisp8_nested",
 *                 isRepeatable: false,
 *                 isFilterable: true,
 *                 isSearchable: true,
 *                 isMetadata: false,
 *                 isRequired: false,
 *                 retrievalImportance: "HIGHEST",
 *                 schemaSources: [{
 *                     name: "dummy_source_nested",
 *                     processorType: "dummy_processor_nested",
 *                 }],
 *                 enumTypeOptions: {
 *                     possibleValues: [
 *                         "M",
 *                         "F",
 *                         "X",
 *                     ],
 *                     validationCheckDisabled: false,
 *                 },
 *             }],
 *         },
 *     }],
 * });
 * ```
 * ### Document Ai Warehouse Document Schema Enum
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const exampleEnum = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("exampleEnum", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-enum",
 *     location: "us",
 *     propertyDefinitions: [{
 *         name: "prop6",
 *         displayName: "propdisp6",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         enumTypeOptions: {
 *             possibleValues: [
 *                 "M",
 *                 "F",
 *                 "X",
 *             ],
 *             validationCheckDisabled: false,
 *         },
 *     }],
 * });
 * ```
 * ### Document Ai Warehouse Document Schema Map
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const exampleMap = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("exampleMap", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-map",
 *     location: "us",
 *     propertyDefinitions: [{
 *         name: "prop4",
 *         displayName: "propdisp4",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         mapTypeOptions: {},
 *     }],
 * });
 * ```
 * ### Document Ai Warehouse Document Schema Datetime
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const exampleDatetime = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("exampleDatetime", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-date_time",
 *     location: "us",
 *     propertyDefinitions: [{
 *         name: "prop7",
 *         displayName: "propdisp7",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         dateTimeTypeOptions: {},
 *     }],
 * });
 * ```
 * ### Document Ai Warehouse Document Schema Timestamp
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const exampleTimestamp = new gcp.essentialcontacts.DocumentAiWarehouseDocumentSchema("exampleTimestamp", {
 *     projectNumber: project.then(project => project.number),
 *     displayName: "test-property-timestamp",
 *     location: "us",
 *     propertyDefinitions: [{
 *         name: "prop5",
 *         displayName: "propdisp5",
 *         isRepeatable: false,
 *         isFilterable: true,
 *         isSearchable: true,
 *         isMetadata: false,
 *         isRequired: false,
 *         retrievalImportance: "HIGHEST",
 *         schemaSources: [{
 *             name: "dummy_source",
 *             processorType: "dummy_processor",
 *         }],
 *         timestampTypeOptions: {},
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * DocumentSchema can be imported using any of these accepted formats* `projects/{{project_number}}/locations/{{location}}/documentSchemas/{{name}}` * `{{project_number}}/{{location}}/{{name}}` When using the `pulumi import` command, DocumentSchema can be imported using one of the formats above. For example
 *
 * ```sh
 *  $ pulumi import gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema default projects/{{project_number}}/locations/{{location}}/documentSchemas/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema default {{project_number}}/{{location}}/{{name}}
 * ```
 */
class DocumentAiWarehouseDocumentSchema extends pulumi.CustomResource {
    /**
     * Get an existing DocumentAiWarehouseDocumentSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DocumentAiWarehouseDocumentSchema(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DocumentAiWarehouseDocumentSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DocumentAiWarehouseDocumentSchema.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["documentIsFolder"] = state ? state.documentIsFolder : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectNumber"] = state ? state.projectNumber : undefined;
            resourceInputs["propertyDefinitions"] = state ? state.propertyDefinitions : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.projectNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectNumber'");
            }
            if ((!args || args.propertyDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'propertyDefinitions'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["documentIsFolder"] = args ? args.documentIsFolder : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["projectNumber"] = args ? args.projectNumber : undefined;
            resourceInputs["propertyDefinitions"] = args ? args.propertyDefinitions : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DocumentAiWarehouseDocumentSchema.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DocumentAiWarehouseDocumentSchema = DocumentAiWarehouseDocumentSchema;
/** @internal */
DocumentAiWarehouseDocumentSchema.__pulumiType = 'gcp:essentialcontacts/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema';
//# sourceMappingURL=documentAiWarehouseDocumentSchema.js.map